import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

file_path = '/Users/elianapritchard/Documents/INST414 WORK/top_insta_influencers_data.csv'
df = pd.read_csv(file_path)

def convert_to_float(value):
    if isinstance(value, str):
        value = value.lower().replace(',', '').strip()
        if 'm' in value:
            return float(value.replace('m', '')) * 1e6
        elif 'k' in value:
            return float(value.replace('k', '')) * 1e3
        elif 'b' in value:
            return float(value.replace('b', '')) * 1e9
        else:
            return float(value)
    return value

df['new_post_avg_like'] = df['new_post_avg_like'].apply(convert_to_float)
df['followers'] = df['followers'].apply(convert_to_float)
df['influence_score'] = df['influence_score'].apply(convert_to_float)
df['posts'] = df['posts'].apply(convert_to_float)
df['engagement_rate'] = df['new_post_avg_like'] / df['followers']
df['avg_likes_per_post'] = df['new_post_avg_like'] / df['posts']
df['log_followers'] = np.log(df['followers'])


df = df.replace([np.inf, -np.inf], np.nan).dropna()

df['group'] = pd.qcut(df['new_post_avg_like'], q=6, labels=False)


features = df[['followers', 'new_post_avg_like', 'engagement_rate', 'log_followers']]
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

wcss = []
k_range = range(1, 11)
for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_features)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(8, 5))
plt.plot(k_range, wcss, marker='o', linestyle='-')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Within-Cluster Sum of Squares (WCSS)')
plt.grid(True)
plt.show()


optimal_k = 4  
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
df['kmeans_cluster'] = kmeans.fit_predict(scaled_features)


cluster_summary = df.groupby('kmeans_cluster').agg({
    'followers': ['mean', 'median', 'min', 'max'],
    'new_post_avg_like': ['mean', 'median', 'min', 'max'],
    'engagement_rate': ['mean', 'median', 'min', 'max'],
    'influence_score': ['mean', 'median', 'min', 'max'],
    'posts': ['mean', 'median']
}).round(2)

print("\nCluster Profiling Summary:")
print(cluster_summary)


plt.figure(figsize=(8, 6))
plt.scatter(df['followers'], df['new_post_avg_like'], c=df['kmeans_cluster'], cmap='viridis', s=80, alpha=0.7)
plt.xlabel('Followers')
plt.ylabel('Average Likes per New Post')
plt.title('KMeans Clustering of Influencers')
plt.grid(True)
plt.show()

X = df[['followers', 'influence_score', 'engagement_rate', 'log_followers']]
y = df['new_post_avg_like']

reg = LinearRegression()
reg.fit(X, y)


coef_df = pd.DataFrame({
    'Feature': X.columns,
    'Coefficient': reg.coef_
})
print("\nRegression Coefficients:")
print(coef_df)

y_pred = reg.predict(X)

rmse = np.sqrt(mean_squared_error(y, y_pred))
r2 = r2_score(y, y_pred)

print(f"\nRMSE: {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")


plt.figure(figsize=(8, 6))
plt.scatter(y, y_pred, alpha=0.6, color='coral')
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--k')
plt.xlabel('Actual Likes')
plt.ylabel('Predicted Likes')
plt.title('Actual vs Predicted Average Likes')
plt.grid(True)
plt.show()


plt.figure(figsize=(8, 6))
plt.scatter(df['followers'], df['engagement_rate'], c=df['kmeans_cluster'], cmap='viridis', s=80, alpha=0.7)
plt.xlabel('Followers')
plt.ylabel('Engagement Rate')
plt.title('Engagement Rate vs Followers')
plt.grid(True)
plt.show()


def create_likes_graph():
    G = nx.Graph()
    for _, row in df.iterrows():
        G.add_node((row['channel_info'], row['new_post_avg_like']),
                   followers=row['followers'],
                   new_post_avg_like=row['new_post_avg_like'],
                   group=row['group'])

    for i, row_i in df.iterrows():
        for j, row_j in df.iterrows():
            if i >= j:
                continue
            if row_i['group'] == row_j['group']:
                G.add_edge((row_i['channel_info'], row_i['new_post_avg_like']),
                           (row_j['channel_info'], row_j['new_post_avg_like']))
    return G

def visualize_graph(G):
    plt.figure(figsize=(14, 12))
    pos = nx.spring_layout(G, seed=42, k=0.6)

    node_sizes = [G.nodes[node]['followers'] / 80000 for node in G.nodes()]
    group_colors = [G.nodes[node]['group'] for node in G.nodes()]

    nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=group_colors, cmap='viridis', alpha=0.8)
    nx.draw_networkx_edges(G, pos, width = 0.6, alpha = 0.4, edge_color = 'gray')

    top_10 = sorted(G.nodes(data=True), key=lambda x: x[1]['followers'], reverse=True)[:10]
    top_10_nodes = {node for node, _ in top_10}

    clusters = set(group_colors)
    top_per_cluster = set()
    for cluster in clusters:
        nodes_in_cluster = [n for n in G.nodes() if G.nodes[n]['group'] == cluster]
        if nodes_in_cluster:
            top_node = max(nodes_in_cluster, key=lambda n: G.nodes[n]['followers'])
            top_per_cluster.add(top_node)

    label_nodes = top_10_nodes.union(top_per_cluster)

    labels = {}
    for node in label_nodes:
        data = G.nodes[node]
        label_text = (f"{node[0]}\nFollowers: {int(data['followers']):,}\n"
                      f"Avg Likes: {int(data['new_post_avg_like']):,}\n"
                      f"Group: {data['group']}")
        labels[node] = label_text

    nx.draw_networkx_labels(G, pos, labels=labels, font_size=9, font_weight='bold')

    plt.title("Influencer Network Graph (Top Nodes and Clustered Connections)", fontsize=14)
    plt.axis('off')
    plt.tight_layout()
    plt.show()

likes_graph = create_likes_graph()
visualize_graph(likes_graph)
